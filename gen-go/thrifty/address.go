// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrifty

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Represents an address.
// 
// Attributes:
//  - Line1
//  - Line2
//  - City
//  - State
//  - Country
type Address struct {
  Line1 string `thrift:"line1,1" db:"line1" json:"line1"`
  Line2 *string `thrift:"line2,2" db:"line2" json:"line2,omitempty"`
  City string `thrift:"city,3" db:"city" json:"city"`
  State string `thrift:"state,4" db:"state" json:"state"`
  Country string `thrift:"country,5" db:"country" json:"country"`
}

func NewAddress() *Address {
  return &Address{}
}


func (p *Address) GetLine1() string {
  return p.Line1
}
var Address_Line2_DEFAULT string
func (p *Address) GetLine2() string {
  if !p.IsSetLine2() {
    return Address_Line2_DEFAULT
  }
return *p.Line2
}

func (p *Address) GetCity() string {
  return p.City
}

func (p *Address) GetState() string {
  return p.State
}

func (p *Address) GetCountry() string {
  return p.Country
}
func (p *Address) IsSetLine2() bool {
  return p.Line2 != nil
}

func (p *Address) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Address)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Line1 = v
}
  return nil
}

func (p *Address)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Line2 = &v
}
  return nil
}

func (p *Address)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.City = v
}
  return nil
}

func (p *Address)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *Address)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *Address) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Address"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Address) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("line1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:line1: ", p), err) }
  if err := oprot.WriteString(string(p.Line1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.line1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:line1: ", p), err) }
  return err
}

func (p *Address) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLine2() {
    if err := oprot.WriteFieldBegin("line2", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:line2: ", p), err) }
    if err := oprot.WriteString(string(*p.Line2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.line2 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:line2: ", p), err) }
  }
  return err
}

func (p *Address) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("city", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:city: ", p), err) }
  if err := oprot.WriteString(string(p.City)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.city (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:city: ", p), err) }
  return err
}

func (p *Address) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:state: ", p), err) }
  if err := oprot.WriteString(string(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:state: ", p), err) }
  return err
}

func (p *Address) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:country: ", p), err) }
  if err := oprot.WriteString(string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:country: ", p), err) }
  return err
}

func (p *Address) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Address(%+v)", *p)
}

