// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrifty

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Represents a human being.
// 
// Attributes:
//  - GivenName
//  - Surname
//  - Age
//  - Address
type Person struct {
  GivenName string `thrift:"givenName,1" db:"givenName" json:"givenName"`
  Surname string `thrift:"surname,2" db:"surname" json:"surname"`
  Age int8 `thrift:"age,3" db:"age" json:"age"`
  Address *Address `thrift:"address,4" db:"address" json:"address"`
}

func NewPerson() *Person {
  return &Person{}
}


func (p *Person) GetGivenName() string {
  return p.GivenName
}

func (p *Person) GetSurname() string {
  return p.Surname
}

func (p *Person) GetAge() int8 {
  return p.Age
}
var Person_Address_DEFAULT *Address
func (p *Person) GetAddress() *Address {
  if !p.IsSetAddress() {
    return Person_Address_DEFAULT
  }
return p.Address
}
func (p *Person) IsSetAddress() bool {
  return p.Address != nil
}

func (p *Person) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Person)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GivenName = v
}
  return nil
}

func (p *Person)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Surname = v
}
  return nil
}

func (p *Person)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Age = temp
}
  return nil
}

func (p *Person)  ReadField4(iprot thrift.TProtocol) error {
  p.Address = &Address{}
  if err := p.Address.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
  }
  return nil
}

func (p *Person) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Person"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Person) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("givenName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:givenName: ", p), err) }
  if err := oprot.WriteString(string(p.GivenName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.givenName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:givenName: ", p), err) }
  return err
}

func (p *Person) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("surname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:surname: ", p), err) }
  if err := oprot.WriteString(string(p.Surname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.surname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:surname: ", p), err) }
  return err
}

func (p *Person) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("age", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:age: ", p), err) }
  if err := oprot.WriteByte(int8(p.Age)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.age (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:age: ", p), err) }
  return err
}

func (p *Person) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:address: ", p), err) }
  if err := p.Address.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:address: ", p), err) }
  return err
}

func (p *Person) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Person(%+v)", *p)
}

